#############################################################################
# Default syslog-ng.conf file which collects all local logs into a
# single file called /var/log/messages tailored to container usage.

@version: 3.35
@include "scl.conf"

source s_local {
  internal();
};

# source s_network_tcp {
#   syslog(transport(tcp) port(6601));
# };

# source s_network_udp {
#   syslog(transport(udp) port(5514));
# };

source s_local_docker { 
  wildcard-file(
    base-dir("/dockerLogs")
    filename-pattern("*-json.log")
    flags(no-parse)
    recursive(yes));
};

# source s_local_syslog { 
#   file("/config/log/current");
# };
parser parser_name {
    json-parser(
        prefix(".json.")
    );
};
# destination d_local {
#   file("/var/log/messages" perm(0666));
#   file("/var/log/messages-kv.log" 
#     template(" $LEGACY_MSGHDR:$MESSAGE $ISODATE $HOST $(format-welf --scope all-nv-pairs)\n") frac-digits(3) perm(0666) dir_perm(0766) create_dirs(yes)
#     );
#   file("/var/log/${PROGRAM}.log" 
#     template("$ISODATE $PROGRAM $MESSAGE \n") perm(0666) dir_perm(0766) create_dirs(yes)
#     );
# };
destination d_json { 
  file("/var/log/${.json.attrs.tag}/${WEEKDAY}.${.json.attrs.tag}.log"
    template("${.attrs.tag} ${.json.log}" ) 
    create-dirs(yes) perm(0666) dir_perm(0777) create_dirs(yes) overwrite-if-older(518000)
    ); 
};

log {
  source(s_local);
  # source(s_network_tcp);
  # source(s_network_udp);
  source(s_local_docker);
  # source(s_local_syslog);
  parser(parser_name);
  # destination(d_local);
  destination(d_json);
};